N = 8  # Number of queens

def print_solution(board):
    for row in board:
        line = ""
        for col in range(N):
            if row == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    print("\n")

def is_safe(queens, row, col):
    for r in range(row):
        c = queens[r]
        # Check column and diagonals
        if c == col or abs(c - col) == abs(r - row):
            return False
    return True

def solve_nqueens(row, queens, solutions):
    if row == N:
        solutions.append(queens[:])
        return
    for col in range(N):
        if is_safe(queens, row, col):
            queens[row] = col
            solve_nqueens(row + 1, queens, solutions)

def main():
    solutions = []
    queens = [-1] * N
    solve_nqueens(0, queens, solutions)

    print(f"Total solutions: {len(solutions)}\n")
    for sol in solutions:
        for r in range(N):
            line = ""
            for c in range(N):
                if sol[r] == c:
                    line += "Q "
                else:
                    line += ". "
            print(line)
        print("\n")

if __name__ == "__main__":
    main()
